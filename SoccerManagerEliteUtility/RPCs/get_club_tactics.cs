// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SMElite;
//
//    var getClubTactics = GetClubTactics.FromJson(jsonString);

namespace SMElite
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class get_club_tactics
    {

        public partial class GetClubTactics
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("jsonrpc")]
            public string Jsonrpc { get; set; }

            [JsonProperty("result")]
            public Result Result { get; set; }
        }

        public partial class Result
        {
            [JsonProperty("blockhash")]
            public string Blockhash { get; set; }

            [JsonProperty("chain")]
            public string Chain { get; set; }

            [JsonProperty("data")]
            public Data Data { get; set; }

            [JsonProperty("gameid")]
            public string Gameid { get; set; }

            [JsonProperty("height")]
            public long Height { get; set; }

            [JsonProperty("state")]
            public string State { get; set; }
        }

        public partial class Data
        {
            [JsonProperty("tactic_actions")]
            public List<TacticAction> TacticActions { get; set; }

            [JsonProperty("team_sheet")]
            public List<long> TeamSheet { get; set; }
        }

        public partial class TacticAction
        {
            [JsonProperty("attacking")]
            public long Attacking { get; set; }

            [JsonProperty("captain")]
            public long Captain { get; set; }

            [JsonProperty("corner_taker")]
            public long CornerTaker { get; set; }

            [JsonProperty("counter_attack")]
            public long CounterAttack { get; set; }

            [JsonProperty("formation_id")]
            public long FormationId { get; set; }

            [JsonProperty("free_kicks")]
            public long FreeKicks { get; set; }

            [JsonProperty("goal_margin")]
            public long GoalMargin { get; set; }

            [JsonProperty("lineup")]
            public List<long> Lineup { get; set; }

            [JsonProperty("men_behind_ball")]
            public long MenBehindBall { get; set; }

            [JsonProperty("mentality")]
            public long Mentality { get; set; }

            [JsonProperty("passing_style")]
            public long PassingStyle { get; set; }

            [JsonProperty("penalty_taker")]
            public long PenaltyTaker { get; set; }

            [JsonProperty("play_offside")]
            public long PlayOffside { get; set; }

            [JsonProperty("playmaker")]
            public long Playmaker { get; set; }

            [JsonProperty("pressing")]
            public long Pressing { get; set; }

            [JsonProperty("situation")]
            public long Situation { get; set; }

            [JsonProperty("tackling_style")]
            public long TacklingStyle { get; set; }

            [JsonProperty("target_man")]
            public long TargetMan { get; set; }

            [JsonProperty("tempo")]
            public long Tempo { get; set; }

            [JsonProperty("tight_marking")]
            public long TightMarking { get; set; }

            [JsonProperty("time")]
            public long Time { get; set; }

            [JsonProperty("use_playmaker")]
            public long UsePlaymaker { get; set; }

            [JsonProperty("use_target_man")]
            public long UseTargetMan { get; set; }
        }

        public partial class GetClubTactics
        {
            public static GetClubTactics FromJson(string json) => JsonConvert.DeserializeObject<GetClubTactics>(json, Converter.Settings);
        }

        //public static class Serialize
        //{
        //    public static string ToJson(this GetClubTactics self) => JsonConvert.SerializeObject(self, Converter.Settings);
        //}

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}
