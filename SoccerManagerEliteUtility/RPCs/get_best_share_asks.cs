// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SMElite;
//
//    var getBestShareAsks = GetBestShareAsks.FromJson(jsonString);

namespace SMElite
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class get_best_share_asks
    {

        public partial class GetBestShareAsks
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("jsonrpc")]
            public string Jsonrpc { get; set; }

            [JsonProperty("result")]
            public Result Result { get; set; }
        }


        public partial class GetBestShareAsks
        {

            public List<string> bestShareAsks(world world)
            {
                List<string> result = new List<string>();

                SortByPrice sbp = new SortByPrice();
                this.Result.Data.Sort(sbp);

                foreach (Datum data in this.Result.Data)
                {
                    bool isPlayer = data.Share.Player != null;
                    bool isClub = data.Share.Club != null;
                    string clubName;
                    string playerName;

                    if (isPlayer)
                    {
                        foreach (KeyValuePair<int, player> player in world.players)
                        {
                            if (player.Value.id == data.Share.Player.ToString())
                            {
                                playerName = player.Value.firstname + " " + player.Value.lastname + " ID: " + player.Value.id.ToString();
                                result.Add(data.BestPrice + " SMC for player " + playerName);
                                break;
                            }
                        }
                    }

                    if (isClub)
                    {
                        foreach (KeyValuePair<int, club> club in world.clubs)
                        {
                            if (club.Value.id == data.Share.Club.ToString())
                            {
                                clubName = club.Value.name;
                                result.Add(data.BestPrice + " SMC for club " + clubName + " ID:" + club.Value.id.ToString());
                                break;
                            }
                        }
                    }
                }


                return result;
            }


        }


        public partial class Result
        {
            [JsonProperty("blockhash")]
            public string Blockhash { get; set; }

            [JsonProperty("chain")]
            public string Chain { get; set; }

            [JsonProperty("data")]
            public List<Datum> Data { get; set; }

            [JsonProperty("gameid")]
            public string Gameid { get; set; }

            [JsonProperty("height")]
            public long Height { get; set; }

            [JsonProperty("state")]
            public string State { get; set; }
        }

        public partial class Datum
        {
            [JsonProperty("best_price")]
            public long BestPrice { get; set; }

            [JsonProperty("share")]
            public Share Share { get; set; }
        }

        public class SortByPrice : IComparer<Datum>
        {
            public int Compare(Datum d1, Datum d2)
            {
                return d1.BestPrice.CompareTo(d2.BestPrice);
            }
        }

        public partial class Share
        {
            [JsonProperty("club", NullValueHandling = NullValueHandling.Ignore)]
            public long? Club { get; set; }

            [JsonProperty("player", NullValueHandling = NullValueHandling.Ignore)]
            public long? Player { get; set; }
        }

        public partial class GetBestShareAsks
        {
            public static GetBestShareAsks FromJson(string json) => JsonConvert.DeserializeObject<GetBestShareAsks>(json, Converter.Settings);
        }

        //public static class Serialize
        //{
        //    public static string ToJson(this GetBestShareAsks self) => JsonConvert.SerializeObject(self, SMElite.Converter.Settings);
        //}

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}
