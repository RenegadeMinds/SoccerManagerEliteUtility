// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SMElite;
//
//    var getBestManagers = GetBestManagers.FromJson(jsonString);

namespace SMElite
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class get_best_managers
    {

        public partial class GetBestManagers
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("jsonrpc")]
            public string Jsonrpc { get; set; }

            [JsonProperty("result")]
            public Result Result { get; set; }
        }

        public partial class GetBestManagers
        {
            public List<string> InOrder()
            {
                List<string> result = new List<string>();
                int count = 0;
                foreach (Datum data in this.Result.Data)
                {
                    if (data.ManagerName != string.Empty && data.EndDate == 0)
                    {
                        count++;
                        result.Add(count.ToString() + ". " + data.ManagerName + "\t - Won: " + data.Won + " - Lost: " + data.Lost + " - Points: " + data.Points);
                    }
                }

                return result;
            }
        }


        public partial class Result
        {
            [JsonProperty("blockhash")]
            public string Blockhash { get; set; }

            [JsonProperty("chain")]
            public string Chain { get; set; }

            [JsonProperty("data")]
            public List<Datum> Data { get; set; }

            [JsonProperty("gameid")]
            public string Gameid { get; set; }

            [JsonProperty("height")]
            public long Height { get; set; }

            [JsonProperty("state")]
            public string State { get; set; }
        }

        public partial class Datum
        {
            [JsonProperty("club_id")]
            public long ClubId { get; set; }

            [JsonProperty("drawn")]
            public long Drawn { get; set; }

            [JsonProperty("end_date")]
            public long EndDate { get; set; }

            [JsonProperty("game_world_id")]
            public long GameWorldId { get; set; }

            [JsonProperty("lost")]
            public long Lost { get; set; }

            [JsonProperty("manager_name")]
            public string ManagerName { get; set; }

            [JsonProperty("num_games")]
            public long NumGames { get; set; }

            [JsonProperty("points")]
            public long Points { get; set; }

            [JsonProperty("start_date")]
            public long StartDate { get; set; }

            [JsonProperty("won")]
            public long Won { get; set; }
        }

        public partial class GetBestManagers
        {
            public static GetBestManagers FromJson(string json) => JsonConvert.DeserializeObject<GetBestManagers>(json, Converter.Settings);
        }

        //public static class Serialize
        //{
        //    public static string ToJson(this GetBestManagers self) => JsonConvert.SerializeObject(self, Converter.Settings);
        //}

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}
