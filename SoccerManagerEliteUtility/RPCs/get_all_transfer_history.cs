using System;
using System.Collections.Generic;
using System.Text;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using J = Newtonsoft.Json.JsonPropertyAttribute;
using R = Newtonsoft.Json.Required;
using N = Newtonsoft.Json.NullValueHandling;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SMElite;
//
//    var getAllTransferHistory = GetAllTransferHistory.FromJson(jsonString);


namespace SMElite
{
    public class get_all_transfer_history
    {

        public static string GetAllTransferHistoryReport (GetAllTransferHistory allTransferHistory, world world)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(StringTemplates.AllTransferHistoryHeader);

            foreach (var history in allTransferHistory.Result.Data)
            {
                // Set up nicely named vars to use
                string amount = Utilities.GetNiceAmount(history.Amount);
                string from = Utilities.GetClubNameFromId(history.ClubIdFrom, world);
                string to = Utilities.GetClubNameFromId(history.ClubIdTo, world);
                string sDate = Utilities.GetNiceDateTime(Utilities.UnixTimeStampToDateTime((double)history.Date));
                string player = Utilities.GetPlayerNameFromId(history.PlayerId, world);

                // Add a line to the report with the string templates.
                sb.AppendLine(string.Format(StringTemplates.AllTransferHistoryRow, player, from, to, amount.ToString(), sDate));
            }

            return sb.ToString();
        }


        public partial class GetAllTransferHistory
        {
            [J("id")] public string Id { get; set; }
            [J("jsonrpc")] public string Jsonrpc { get; set; }
            [J("result")] public Result Result { get; set; }
        }

        public partial class Result
        {
            [J("blockhash")] public string Blockhash { get; set; }
            [J("chain")] public string Chain { get; set; }
            [J("data")] public List<Datum> Data { get; set; }
            [J("gameid")] public string Gameid { get; set; }
            [J("height")] public long Height { get; set; }
            [J("state")] public string State { get; set; }
        }

        public partial class Datum
        {
            [J("amount")] public long Amount { get; set; }
            [J("club_id_from")] public long ClubIdFrom { get; set; }
            [J("club_id_to")] public long ClubIdTo { get; set; }
            [J("date")] public long Date { get; set; }
            [J("player_id")] public long PlayerId { get; set; }
        }

        public partial class GetAllTransferHistory
        {
            public static GetAllTransferHistory FromJson(string json) => JsonConvert.DeserializeObject<GetAllTransferHistory>(json, get_all_transfer_history.Converter.Settings);
        }

        //public static class Serialize
        //{
        //    public static string ToJson(this GetAllTransferHistory self) => JsonConvert.SerializeObject(self, get_all_transfer_history.Converter.Settings);
        //}

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }


    }
}
